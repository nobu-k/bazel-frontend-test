load("@npm//@bazel/typescript:index.bzl", "ts_project")
load("@npm//@bazel/rollup:index.bzl", "rollup_bundle")
load("@build_bazel_rules_nodejs//:index.bzl", "pkg_web")
load("@npm//http-server:index.bzl", "http_server")
load("@npm//@bazel/terser:index.bzl", "terser_minified")

ts_project(
    name = "lib",
    srcs = glob(
        ["*.ts*"],
        exclude = ["*.test.ts*"],
    ),
    declaration = True,
    source_map = True,
    tsconfig = "//:tsconfig.json",
    deps = [
        "//component",
        "@npm//@types",
        "@npm//react",
        "@npm//react-dom",
    ],
)

# TODO: production or development

rollup_bundle(
    name = "bundle",
    srcs = [":lib"],
    config_file = "rollup.config.js",
    entry_point = "index.js",
    format = "iife",
    output_dir = True,  # TODO: customize output directory name. "name" attribute will be used as the output directory name.
    deps = [
        ":lib",
        "@npm//@rollup/plugin-alias",
        "@npm//@rollup/plugin-commonjs",
        "@npm//@rollup/plugin-node-resolve",
        "@npm//@rollup/plugin-replace",
    ],
)

terser_minified(
    name = "bundle.min",
    src = ":bundle",
)

# TODO: instead of this genrule, create a rule to generate a directory whose name is a hash-value, and inject it to index.html
genrule(
    name = "package-script",
    srcs = [":bundle.min"],
    outs = ["script"],
    cmd = "cp -r $< $(RULEDIR)/script",
)

pkg_web(
    name = "package",
    srcs = [
        "index.html",
        ":package-script",
    ],
)

http_server(
    name = "server",
    data = [":package"],
    templated_args = [
        "app/package",
        # Use -P http://proxy/ when proxy is required
    ],
)
